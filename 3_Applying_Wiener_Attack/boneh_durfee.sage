

# This file was *autogenerated* from the file Boneh-Durfee.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0p292 = RealNumber('0.292'); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_88825874675686960805899640215157557238059693391886816945598816426620297734153 = Integer(88825874675686960805899640215157557238059693391886816945598816426620297734153); _sage_const_83192099607973275855506355821570922316626745149874418666834682477591321614027 = Integer(83192099607973275855506355821570922316626745149874418666834682477591321614027)
from sage.all import *

def boneh_durfee(N, e, delta=_sage_const_0p292 , m=_sage_const_3 , t=_sage_const_2 ):  # Adjust m and t
    PR = PolynomialRing(ZZ, 'x, y')
    x, y = PR.gens()
    
    f = x * (e * y + _sage_const_1 ) - N

    # Calculate bounds
    X = int(_sage_const_2  * N**delta)
    Y = int(_sage_const_2  * N**delta)
    
    print(f"Running Boneh-Durfee with X={X}, Y={Y}, N={N}, e={e}, m={m}, t={t}")
    
    # Ensure m and t are integers
    m = int(m)
    t = int(t)

    # Construct the lattice
    G = matrix(ZZ, m * t, m * t)  # Fixed initialization
    print(f"Matrix size: {G.nrows()} x {G.ncols()}")

    assert G.nrows() == m * t and G.ncols() == m * t, "Matrix size does not match m*t x m*t"
    
    monomials = [(x**i) * (y**j) for i in range(m) for j in range(t)]
    print(f"Number of monomials = {len(monomials)}")

    if len(monomials) > m * t:
        raise ValueError("Number of monomials exceeds matrix size. Check m and t values.")
    
    for i in range(m * t):  # Ensure this range is within the size of G
        try:
            G[i, i] = N**(m - _sage_const_1  - (i // t)) * e**(t - _sage_const_1  - (i % t))
        except IndexError as ex:
            print(f"Error: i = {i}, matrix size = {G.nrows()} x {G.ncols()}")
            raise ex
    
    G = G.LLL()
    print(f"LLL-reduced basis:\n{G}")
    
    # Extract possible private key candidates
    possible_private_keys = []
    for i in range(G.nrows()):
        for j in range(G.ncols()):
            candidate = G[i, j]
            if candidate > _sage_const_0  and candidate < N:  # Filter plausible candidates
                if (e * candidate) % N == _sage_const_1 :  # Check if candidate satisfies the congruence
                    possible_private_keys.append(candidate)
                    print(f"Possible private key d = {candidate} (from G[{i}, {j}])")
    
    if possible_private_keys:
        print(f"Recovered private key(s): {possible_private_keys}")
        return possible_private_keys
    else:
        print("Failed to recover d.")
        return None


# Example parameters (replace these with your values)
N = _sage_const_88825874675686960805899640215157557238059693391886816945598816426620297734153 
e = _sage_const_83192099607973275855506355821570922316626745149874418666834682477591321614027   # Replace with your public exponent

# Call the attack
d = boneh_durfee(N, e)
if d:
    print(f"Recovered private key(s) d = {d}")
else:
    print("Failed to recover d.")

